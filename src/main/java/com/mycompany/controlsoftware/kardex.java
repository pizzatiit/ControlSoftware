/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.controlsoftware;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.InputStream;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Usuario
 */
public class kardex extends javax.swing.JInternalFrame {

    /**
     * Creates new form formato
     */
    BaseDeDatos bd = new BaseDeDatos();

    public kardex() {
        super("Usuario: " + new BaseDeDatos().valor("select user from usuario where cod_user=" + ControlSoftware.us) + ", Sucursal: " + new BaseDeDatos().valor("select company from company where id_company=" + ControlSoftware.cia));

        initComponents();

//        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh72.png")));
//        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/printer72.png")));
//        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back72.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        agg = new javax.swing.JButton();
        idprod = new javax.swing.JTextField();
        codprod = new javax.swing.JTextField();
        desprod = new javax.swing.JTextField();
        opc1 = new javax.swing.JRadioButton();
        opc2 = new javax.swing.JRadioButton();
        opc3 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        d = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        h = new com.toedter.calendar.JDateChooser();
        con_fecha = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("KARDEX DE INVENTARIO");

        jTable1 = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        jPanel3.setBackground(new java.awt.Color(195, 180, 225));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 0, 0));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back24.png"))); // NOI18N
        jButton7.setText("REGRESAR");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton7);

        jButton8.setBackground(new java.awt.Color(255, 255, 255));
        jButton8.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton8.setForeground(new java.awt.Color(0, 0, 0));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print24.png"))); // NOI18N
        jButton8.setText("IMPRIMIR");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton8);

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 0, 0));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh24.png"))); // NOI18N
        jButton6.setText("REFRESCAR");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton6);

        jPanel1.setBackground(new java.awt.Color(195, 180, 225));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "FILTROS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        agg.setBackground(new java.awt.Color(255, 255, 255));
        agg.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        agg.setForeground(new java.awt.Color(0, 0, 0));
        agg.setText("PRODUCTO");
        agg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggActionPerformed(evt);
            }
        });

        idprod.setEditable(false);
        idprod.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                idprodMouseClicked(evt);
            }
        });
        idprod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                idprodKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                idprodKeyTyped(evt);
            }
        });

        codprod.setEditable(false);

        desprod.setEditable(false);
        desprod.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                desprodMouseClicked(evt);
            }
        });
        desprod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                desprodKeyTyped(evt);
            }
        });

        opc1.setBackground(new java.awt.Color(195, 180, 225));
        buttonGroup1.add(opc1);
        opc1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        opc1.setForeground(new java.awt.Color(0, 0, 0));
        opc1.setSelected(true);
        opc1.setText("MOVIMIENTOS GENERALES");

        opc2.setBackground(new java.awt.Color(195, 180, 225));
        buttonGroup1.add(opc2);
        opc2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        opc2.setForeground(new java.awt.Color(0, 0, 0));
        opc2.setText("SOLO COMPRAS");

        opc3.setBackground(new java.awt.Color(195, 180, 225));
        buttonGroup1.add(opc3);
        opc3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        opc3.setForeground(new java.awt.Color(0, 0, 0));
        opc3.setText("SOLO VENTAS");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("DESDE");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("HASTA");

        con_fecha.setBackground(new java.awt.Color(195, 180, 225));
        con_fecha.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        con_fecha.setForeground(new java.awt.Color(0, 0, 0));
        con_fecha.setText("FILTRAR POR FECHA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(agg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(idprod, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codprod))
                            .addComponent(desprod, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(h, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(d, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(opc1)
                        .addGap(54, 54, 54)
                        .addComponent(opc2)
                        .addGap(65, 65, 65)
                        .addComponent(opc3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(con_fecha)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(agg, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(codprod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(idprod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1)
                        .addComponent(d, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(desprod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(h, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(opc1)
                    .addComponent(opc2)
                    .addComponent(opc3)
                    .addComponent(con_fecha))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1)))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));
        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("CONTROLSOFTWARE - COPYRIGHT 2023 - ING. JUNIOR MORALES");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggActionPerformed
        // TODO add your handling code here:
        seleccionar_producto_kardex l = new seleccionar_producto_kardex();
        Dimension internalFrameSize = l.getSize();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        l.setLocation((screenSize.width - internalFrameSize.width) / 2,
                (screenSize.height - internalFrameSize.height) / 2);
        DESKSOFTWARE.escritorio.add(l);
        l.show();

    }//GEN-LAST:event_aggActionPerformed

    private void idprodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_idprodMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_idprodMouseClicked

    private void idprodKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idprodKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_idprodKeyReleased

    private void idprodKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idprodKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_idprodKeyTyped

    private void desprodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_desprodMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_desprodMouseClicked

    private void desprodKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_desprodKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_desprodKeyTyped

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if (idprod.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ningun producto seleccionado");
            return;
        }
        if (codprod.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ningun producto seleccionado");
            return;
        }
        if (desprod.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ningun producto seleccionado");
            return;
        }
        SimpleDateFormat Date_Format = new SimpleDateFormat("yyyy-MM-dd");
        Date date1;
        date1 = d.getDate();
        Date date2;
        date2 = h.getDate();
        if (con_fecha.isSelected() && (date1 == null || date2 == null)) {
            JOptionPane.showMessageDialog(null, "Para filtrar por fecha debe seleccionar el rango correctamente.");
            return;
        }
        if (con_fecha.isSelected() && date2.compareTo(date1) == -1) {
            JOptionPane.showMessageDialog(null, "La fecha final no puede ser mayor a la inicial.");
            return;
        }
        if (opc1.isSelected() && con_fecha.isSelected()) {
            bd.LlenarTabla("SELECT\n"
                    + "    fecha,\n"
                    + "    'ORDEN-COMPRA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT nfactura FROM ordencompra WHERE ordencompra.id_ordencompra = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "     COALESCE((SELECT p.proveedor from proveedor p inner join ordencompra o on o.id_proveedor=p.idproveedor where o.id_ordencompra=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT preciopromL from detalleorden where detalleorden.id_ordencompra=kardex.id_documento and detalleorden.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT p1 from detalleorden where detalleorden.id_ordencompra=kardex.id_documento and detalleorden.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM ordencompra WHERE ordencompra.id_ordencompra = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "    id_producto = " + idprod.getText() + " and tipo_documento=1 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'FACTURA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT numerofactura FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente where f.idfactura=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT preciovendido from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=2 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'ANULACION-FACTURA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT numerofactura FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente where f.idfactura=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT preciovendido from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad, \n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=3 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'NOTA-CREDITO' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_devolucion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento ), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente inner join devoluciones d on d.id_factura=f.idfactura where d.id_devolucion=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=4 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + "\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'ANULA-NOTA-CREDITO' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_devolucion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento ), 'DOC. ELIMINADO') AS documento,\n"
                    + "     COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente inner join devoluciones d on d.id_factura=f.idfactura where d.id_devolucion=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "   cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE \n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=5 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + "\n"
                    + "\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'AJUSTE-SALIDA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_documento FROM ajusteinventario WHERE ajusteinventario.id = kardex.id_documento ), 'DOC. ELIMINADO') AS documento,\n"
                    + "     COALESCE((SELECT u.user from usuario u inner join ajusteinventario a on a.usuarioid=u.cod_user where a.id=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_ajusteinventario where detalle_ajusteinventario.ajusteid=kardex.id_documento and detalle_ajusteinventario.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT p1 from detalle_ajusteinventario where detalle_ajusteinventario.ajusteid=kardex.id_documento and detalle_ajusteinventario.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "   cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM ajusteinventario WHERE ajusteinventario.id = kardex.id_documento ), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE \n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=6 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + "\n"
                    + "\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'AJUSTE-ENTRADA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_documento FROM ajusteinventario WHERE ajusteinventario.id = kardex.id_documento ), 'DOC. ELIMINADO') AS documento,\n"
                    + "     COALESCE((SELECT u.user from usuario u inner join ajusteinventario a on a.usuarioid=u.cod_user where a.id=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_ajusteinventario where detalle_ajusteinventario.ajusteid=kardex.id_documento and detalle_ajusteinventario.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT p1 from detalle_ajusteinventario where detalle_ajusteinventario.ajusteid=kardex.id_documento and detalle_ajusteinventario.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "   cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM ajusteinventario WHERE ajusteinventario.id = kardex.id_documento ), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE \n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=7 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + "ORDER BY fecha;", jTable1);
        }
        if (opc2.isSelected() && con_fecha.isSelected()) {
            bd.LlenarTabla("SELECT\n"
                    + "    fecha,\n"
                    + "    'ORDEN-COMPRA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT nfactura FROM ordencompra WHERE ordencompra.id_ordencompra = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "     COALESCE((SELECT p.proveedor from proveedor p inner join ordencompra o on o.id_proveedor=p.idproveedor where o.id_ordencompra=kardex.id_documento), 'DOC. ELIMINADO') as proveedor,\n"
                    + "    COALESCE((SELECT preciopromL from detalleorden where detalleorden.id_ordencompra=kardex.id_documento and detalleorden.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT p1 from detalleorden where detalleorden.id_ordencompra=kardex.id_documento and detalleorden.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM ordencompra WHERE ordencompra.id_ordencompra = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "    id_producto = " + idprod.getText() + " and tipo_documento=1 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + "ORDER BY fecha;", jTable1);
        }
        if (opc3.isSelected() && con_fecha.isSelected()) {
            bd.LlenarTabla("SELECT\n"
                    + "    fecha,\n"
                    + "    'FACTURA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT numerofactura FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente where f.idfactura=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT preciovendido from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=2 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'ANULACION-FACTURA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT numerofactura FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente where f.idfactura=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT preciovendido from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad, \n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=3 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'NOTA-CREDITO' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_devolucion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente inner join devoluciones d on d.id_factura=f.idfactura where d.id_devolucion=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=4 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + "\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'ANULA-NOTA-CREDITO' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_devolucion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento ), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente inner join devoluciones d on d.id_factura=f.idfactura where d.id_devolucion=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "   cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE \n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=5 and cia=" + ControlSoftware.cia + " and fecha BETWEEN '" + Date_Format.format(d.getDate()) + "' and '" + Date_Format.format(h.getDate()) + "'\n"
                    + " \n"
                    + "ORDER BY fecha;", jTable1);
        }
        if (opc1.isSelected() && !con_fecha.isSelected()) {
            bd.LlenarTabla("SELECT\n"
                    + "    fecha,\n"
                    + "    'ORDEN-COMPRA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT nfactura FROM ordencompra WHERE ordencompra.id_ordencompra = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT p.proveedor from proveedor p inner join ordencompra o on o.id_proveedor=p.idproveedor where o.id_ordencompra=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT preciopromL from detalleorden where detalleorden.id_ordencompra=kardex.id_documento and detalleorden.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT p1 from detalleorden where detalleorden.id_ordencompra=kardex.id_documento and detalleorden.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM ordencompra WHERE ordencompra.id_ordencompra = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "    id_producto = " + idprod.getText() + " and tipo_documento=1 and cia=" + ControlSoftware.cia + "\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'FACTURA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT numerofactura FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente where f.idfactura=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT preciovendido from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=2 and cia=" + ControlSoftware.cia + "\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'ANULACION-FACTURA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT numerofactura FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente where f.idfactura=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT preciovendido from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad, \n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=3 and cia=" + ControlSoftware.cia + "\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'NOTA-CREDITO' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_devolucion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento ), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente inner join devoluciones d on d.id_factura=f.idfactura where d.id_devolucion=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=4 and cia=" + ControlSoftware.cia + "\n"
                    + "\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'ANULA-NOTA-CREDITO' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_devolucion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento ), 'DOC. ELIMINADO') AS documento,\n"
                    + "     COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente inner join devoluciones d on d.id_factura=f.idfactura where d.id_devolucion=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "   cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE \n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=5 and cia=" + ControlSoftware.cia + "\n"
                    + " \n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'AJUSTE-SALIDA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_documento FROM ajusteinventario WHERE ajusteinventario.id = kardex.id_documento ), 'DOC. ELIMINADO') AS documento,\n"
                    + "     COALESCE((SELECT u.user from usuario u inner join ajusteinventario a on a.usuarioid=u.cod_user where a.id=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_ajusteinventario where detalle_ajusteinventario.ajusteid=kardex.id_documento and detalle_ajusteinventario.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT p1 from detalle_ajusteinventario where detalle_ajusteinventario.ajusteid=kardex.id_documento and detalle_ajusteinventario.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "   cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM ajusteinventario WHERE ajusteinventario.id = kardex.id_documento ), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE \n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=6 and cia=" + ControlSoftware.cia + "\n" 
                    + "\n" 
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'AJUSTE-ENTRADA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_documento FROM ajusteinventario WHERE ajusteinventario.id = kardex.id_documento ), 'DOC. ELIMINADO') AS documento,\n"
                    + "     COALESCE((SELECT u.user from usuario u inner join ajusteinventario a on a.usuarioid=u.cod_user where a.id=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_ajusteinventario where detalle_ajusteinventario.ajusteid=kardex.id_documento and detalle_ajusteinventario.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT p1 from detalle_ajusteinventario where detalle_ajusteinventario.ajusteid=kardex.id_documento and detalle_ajusteinventario.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "   cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM ajusteinventario WHERE ajusteinventario.id = kardex.id_documento ), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE \n"
                      + "     id_producto = " + idprod.getText() + " and tipo_documento=7 and cia=" + ControlSoftware.cia + "\n" 
                             
                    + "ORDER BY fecha;", jTable1);
        }
        if (opc2.isSelected() && !con_fecha.isSelected()) {
            bd.LlenarTabla("SELECT\n"
                    + "    fecha,\n"
                    + "    'ORDEN-COMPRA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT nfactura FROM ordencompra WHERE ordencompra.id_ordencompra = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT p.proveedor from proveedor p inner join ordencompra o on o.id_proveedor=p.idproveedor where o.id_ordencompra=kardex.id_documento), 'DOC. ELIMINADO') as proveedor,\n"
                    + "    COALESCE((SELECT preciopromL from detalleorden where detalleorden.id_ordencompra=kardex.id_documento and detalleorden.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT p1 from detalleorden where detalleorden.id_ordencompra=kardex.id_documento and detalleorden.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM ordencompra WHERE ordencompra.id_ordencompra = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "    id_producto = " + idprod.getText() + " and tipo_documento=1 and cia=" + ControlSoftware.cia + "\n"
                    + "ORDER BY fecha;", jTable1);
        }
        if (opc3.isSelected() && !con_fecha.isSelected()) {
            bd.LlenarTabla("SELECT\n"
                    + "    fecha,\n"
                    + "    'FACTURA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT numerofactura FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente where f.idfactura=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT preciovendido from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=2 and cia=" + ControlSoftware.cia + "\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'ANULACION-FACTURA' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT numerofactura FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente where f.idfactura=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT costo from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT preciovendido from detalle_factura where detalle_factura.idfactura=kardex.id_documento and detalle_factura.idproducto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad, \n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM factura WHERE factura.idfactura = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=3 and cia=" + ControlSoftware.cia + "\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'NOTA-CREDITO' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_devolucion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento ), 'DOC. ELIMINADO') AS documento,\n"
                    + "    COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente inner join devoluciones d on d.id_factura=f.idfactura where d.id_devolucion=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "    cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE\n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=4 and cia=" + ControlSoftware.cia + "\n"
                    + "\n"
                    + "\n"
                    + "UNION\n"
                    + "\n"
                    + "SELECT\n"
                    + "    fecha,\n"
                    + "    'ANULA-NOTA-CREDITO' AS tipo_transaccion,\n"
                    + "    COALESCE((SELECT n_devolucion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento ), 'DOC. ELIMINADO') AS documento,\n"
                    + "     COALESCE((SELECT c.nombre from clientes c inner join factura f on f.idcliente=c.idcliente inner join devoluciones d on d.id_factura=f.idfactura where d.id_devolucion=kardex.id_documento), 'DOC. ELIMINADO') as titular,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as costo,\n"
                    + "    COALESCE((SELECT precio from detalle_devolucion where detalle_devolucion.id_devolucion=kardex.id_documento and detalle_devolucion.id_producto=kardex.id_producto), 'DOC. ELIMINADO') as precio,\n"
                    + "    saldo_actual,\n"
                    + "   cantidad,\n"
                    + "    saldo_final, \n"
                    + "    (SELECT USUARIO.USER FROM USUARIO WHERE USUARIO.COD_USER=KARDEX.IDUSUARIO) AS usuario,\n"
                    + "    COALESCE((SELECT observacion FROM devoluciones WHERE devoluciones.id_devolucion = kardex.id_documento), 'DOC. ELIMINADO') AS observacion\n"
                    + "FROM\n"
                    + "    kardex\n"
                    + "WHERE \n"
                    + "     id_producto = " + idprod.getText() + " and tipo_documento=5 and cia=" + ControlSoftware.cia + "\n"
                    + " \n"
                    + "ORDER BY fecha;", jTable1);
        }
        autoajustar();


    }//GEN-LAST:event_jButton6ActionPerformed
    void autoajustar() {
        // Obtén el TableColumnModel de tu JTable
        TableColumnModel columnModel = jTable1.getColumnModel();

// Itera sobre las columnas y ajusta su tamaño al contenido
        for (int columnIndex = 0; columnIndex < columnModel.getColumnCount(); columnIndex++) {
            TableColumn column = columnModel.getColumn(columnIndex);
            int width = 0;

            // Ajusta el ancho de la columna según el contenido de las celdas
            TableCellRenderer renderer = column.getHeaderRenderer();
            if (renderer == null) {
                renderer = jTable1.getTableHeader().getDefaultRenderer();
            }
            Component headerComponent = renderer.getTableCellRendererComponent(jTable1, column.getHeaderValue(), false, false, 0, columnIndex);
            width = headerComponent.getPreferredSize().width;

            for (int row = 0; row < jTable1.getRowCount(); row++) {
                renderer = jTable1.getCellRenderer(row, columnIndex);
                Component component = renderer.getTableCellRendererComponent(jTable1, jTable1.getValueAt(row, columnIndex), false, false, row, columnIndex);
                width = Math.max(width, component.getPreferredSize().width);
            }

            // Establece el ancho ajustado para la columna
            column.setPreferredWidth(width);
        }

// Ajusta el tamaño de las columnas al contenido
        jTable1.getTableHeader().resizeAndRepaint();
    }
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        Inventarios l = new Inventarios();
        Dimension internalFrameSize = l.getSize();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        l.setLocation((screenSize.width - internalFrameSize.width) / 2,
                (screenSize.height - internalFrameSize.height) / 2);
        DESKSOFTWARE.escritorio.add(l);
        l.show();
        dispose();

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        if (idprod.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ningun producto seleccionado");
            return;
        }
        if (codprod.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ningun producto seleccionado");
            return;
        }
        if (desprod.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ningun producto seleccionado");
            return;
        }
        SimpleDateFormat Date_Format = new SimpleDateFormat("yyyy-MM-dd");
        Date date1;
        date1 = d.getDate();
        Date date2;
        date2 = h.getDate();
        if (con_fecha.isSelected() && (date1 == null || date2 == null)) {
            JOptionPane.showMessageDialog(null, "Para filtrar por fecha debe seleccionar el rango correctamente.");
            return;
        }
        if (con_fecha.isSelected() && date2.compareTo(date1) == -1) {
            JOptionPane.showMessageDialog(null, "La fecha final no puede ser mayor a la inicial.");
            return;
        }
        if (opc1.isSelected() && con_fecha.isSelected()) {
            try {

                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/TRANSACCIONES_TODASXFECHA.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("producto", idprod.getText());
                parametros.put("desde", Date_Format.format(d.getDate()));
                parametros.put("hasta", Date_Format.format(h.getDate()));
                parametros.put("cia", ControlSoftware.cia);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);
                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            }

        }
        if (opc2.isSelected() && con_fecha.isSelected()) {
            try {

                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/TRANSACCIONES_COMPRASXFECHA.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("producto", idprod.getText());
                parametros.put("desde", Date_Format.format(d.getDate()));
                parametros.put("hasta", Date_Format.format(h.getDate()));
                parametros.put("cia", ControlSoftware.cia);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);
                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            }

        }
        if (opc3.isSelected() && con_fecha.isSelected()) {
            try {

                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/TRANSACCIONES_VENTASXFECHA.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("producto", idprod.getText());
                parametros.put("desde", Date_Format.format(d.getDate()));
                parametros.put("hasta", Date_Format.format(h.getDate()));
                parametros.put("cia", ControlSoftware.cia);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);
                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            }

        }
        if (opc1.isSelected() && !con_fecha.isSelected()) {
            try {

                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/TRANSACCIONES_TODAS.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("producto", idprod.getText());
                parametros.put("desde", "");
                parametros.put("hasta", "");
                parametros.put("cia", ControlSoftware.cia);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);
                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            }

        }
        if (opc2.isSelected() && !con_fecha.isSelected()) {
            try {

                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/TRANSACCIONES_COMPRAS.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("producto", idprod.getText());
                parametros.put("desde", "");
                parametros.put("hasta", "");
                parametros.put("cia", ControlSoftware.cia);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);
                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            }

        }
        if (opc3.isSelected() && !con_fecha.isSelected()) {
            try {

                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/TRANSACCIONES_VENTAS.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("producto", idprod.getText());
                parametros.put("desde", "");
                parametros.put("hasta", "");
                parametros.put("cia", ControlSoftware.cia);
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);
                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            }

        }


    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(kardex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(kardex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(kardex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(kardex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new kardex().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agg;
    private javax.swing.ButtonGroup buttonGroup1;
    public static javax.swing.JTextField codprod;
    private javax.swing.JCheckBox con_fecha;
    private com.toedter.calendar.JDateChooser d;
    public static javax.swing.JTextField desprod;
    private com.toedter.calendar.JDateChooser h;
    public static javax.swing.JTextField idprod;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton opc1;
    private javax.swing.JRadioButton opc2;
    private javax.swing.JRadioButton opc3;
    // End of variables declaration//GEN-END:variables
}
