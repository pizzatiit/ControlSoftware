/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.controlsoftware;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Usuario
 */
public class catalogogeneraldeclientes_opciones extends javax.swing.JInternalFrame {

    /**
     * Creates new form formato
     */
    public String ustemp = "";
    BaseDeDatos bd = new BaseDeDatos();

    public catalogogeneraldeclientes_opciones() {
        super("Usuario: " + new BaseDeDatos().valor("select user from usuario where cod_user=" + ControlSoftware.us) + ", Sucursal: " + new BaseDeDatos().valor("select company from company where id_company=" + ControlSoftware.cia));
        initComponents();
        bd.LlenarCombo1("select id_gira, gira from gira where cia=" + ControlSoftware.cia, gira, "id_gira", "gira");
        bd.LlenarCombo1("select id_vendedor, vendedor from vendedor where cia=" + ControlSoftware.cia, vendedor, "id_vendedor", "vendedor");
        bd.LlenarCombo1("select id_departamento, departamento from departamento ", departamento, "id_departamento", "departamento");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        porvendedor = new javax.swing.JRadioButton();
        porgira = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        gira = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        vendedor = new javax.swing.JComboBox<>();
        sf = new javax.swing.JRadioButton();
        pordepartamento = new javax.swing.JRadioButton();
        soloinactivos = new javax.swing.JRadioButton();
        soloactivos = new javax.swing.JRadioButton();
        sinfiltro = new javax.swing.JRadioButton();
        xgira = new javax.swing.JCheckBox();
        xvendedor = new javax.swing.JCheckBox();
        xdepartamento = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        departamento = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("CATALOGO DE CLIENTES");

        jPanel1.setBackground(new java.awt.Color(195, 180, 225));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 0, 0));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back24.png"))); // NOI18N
        jButton4.setText("REGRESAR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh24.png"))); // NOI18N
        jButton1.setText("GENERAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        porvendedor.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(porvendedor);
        porvendedor.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        porvendedor.setForeground(new java.awt.Color(0, 0, 0));
        porvendedor.setText("POR VENDEDOR");

        porgira.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(porgira);
        porgira.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        porgira.setForeground(new java.awt.Color(0, 0, 0));
        porgira.setText("POR GIRA");
        porgira.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porgiraActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("GIRA");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("VENDEDOR");

        sf.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(sf);
        sf.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        sf.setForeground(new java.awt.Color(0, 0, 0));
        sf.setSelected(true);
        sf.setText("SIN FILTRO");
        sf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sfActionPerformed(evt);
            }
        });

        pordepartamento.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(pordepartamento);
        pordepartamento.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        pordepartamento.setForeground(new java.awt.Color(0, 0, 0));
        pordepartamento.setText("POR DEPARTAMENTO");

        soloinactivos.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(soloinactivos);
        soloinactivos.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        soloinactivos.setForeground(new java.awt.Color(0, 0, 0));
        soloinactivos.setText("SOLO INACTIVOS");

        soloactivos.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(soloactivos);
        soloactivos.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        soloactivos.setForeground(new java.awt.Color(0, 0, 0));
        soloactivos.setSelected(true);
        soloactivos.setText("SOLO ACTIVOS");

        sinfiltro.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(sinfiltro);
        sinfiltro.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        sinfiltro.setForeground(new java.awt.Color(0, 0, 0));
        sinfiltro.setText("SIN FILTRO");

        xgira.setBackground(new java.awt.Color(255, 255, 255));
        xgira.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        xgira.setForeground(new java.awt.Color(0, 0, 0));
        xgira.setText("PORGIRA");

        xvendedor.setBackground(new java.awt.Color(255, 255, 255));
        xvendedor.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        xvendedor.setForeground(new java.awt.Color(0, 0, 0));
        xvendedor.setText("PORVENDEDOR");

        xdepartamento.setBackground(new java.awt.Color(255, 255, 255));
        xdepartamento.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        xdepartamento.setForeground(new java.awt.Color(0, 0, 0));
        xdepartamento.setText("PORDEPTO");

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("PORDEPTO");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(pordepartamento)
                                .addGap(126, 126, 126))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(porvendedor, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(porgira))
                                    .addComponent(sf))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(xgira)
                                    .addComponent(xvendedor)
                                    .addComponent(xdepartamento))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gira, 0, 227, Short.MAX_VALUE)
                            .addComponent(vendedor, 0, 227, Short.MAX_VALUE)
                            .addComponent(departamento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(1, 1, 1))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(soloactivos)
                            .addComponent(soloinactivos)
                            .addComponent(sinfiltro))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gira, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(xgira))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(vendedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(xvendedor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(xdepartamento)
                            .addComponent(departamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(sf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porgira)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porvendedor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pordepartamento)))
                .addGap(26, 26, 26)
                .addComponent(soloactivos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(soloinactivos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sinfiltro)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));
        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("CONTROLSOFTWARE - COPYRIGHT 2023 - ING. JUNIOR MORALES");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sfActionPerformed

    private void porgiraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porgiraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porgiraActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int opc = 0;
        if (sf.isSelected()) {
            opc = 1;
        }
        if (porgira.isSelected()) {
            opc = 2;
        }
        if (porvendedor.isSelected()) {
            opc = 3;
        }
        if (pordepartamento.isSelected()) {
            opc = 4;
        }

        int est = 0;
        if (soloactivos.isSelected()) {
            est = 1;
        }
        if (soloinactivos.isSelected()) {
            est = 2;
        }
        if (sinfiltro.isSelected()) {
            est = 3;
        }

        int xg = 0;
        Item combogira = (Item) gira.getSelectedItem();
        if (xgira.isSelected()) {
            xg = Integer.parseInt(combogira.getId());
        }

        int xv = 0;
        Item combovendedor = (Item) vendedor.getSelectedItem();
        if (xvendedor.isSelected()) {
            xv = Integer.parseInt(combovendedor.getId());
        }

        int xd = 0;
        Item combodepartamento = (Item) departamento.getSelectedItem();
        if (xdepartamento.isSelected()) {
            xd = Integer.parseInt(combodepartamento.getId());
        }

        if (opc == 1 && est == 3) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);

                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("estado1", 1);
                parametros.put("estado2", 0);
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (opc == 1 && est == 2) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);

                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("estado1", 0);
                parametros.put("estado2", 0);
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (opc == 1 && est == 1) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);

                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("estado1", 1);
                parametros.put("estado2", 1);
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (opc == 2 && est == 3) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes_porgira.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("gira", xg);
                parametros.put("estado1", 1);
                parametros.put("estado2", 0);
                if (xgira.isSelected()) {
                    parametros.put("parametro", xg);
                } else {
                    parametros.put("parametro", bd.valor("select max(id_gira) from gira where cia=" + ControlSoftware.cia));
                }
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (opc == 2 && est == 2) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes_porgira.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("gira", xg);
                parametros.put("estado1", 0);
                parametros.put("estado2", 0);
                if (xgira.isSelected()) {
                    parametros.put("parametro", xg);
                } else {
                    parametros.put("parametro", bd.valor("select max(id_gira) from gira where cia=" + ControlSoftware.cia));
                }
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (opc == 2 && est == 1) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes_porgira.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("gira", xg);
                parametros.put("estado1", 1);
                parametros.put("estado2", 1);
                if (xgira.isSelected()) {
                    parametros.put("parametro", xg);
                } else {
                    parametros.put("parametro", bd.valor("select max(id_gira) from gira where cia=" + ControlSoftware.cia));
                }
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (opc == 3 && est == 3) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes_porvendedor.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("gira", xv);
                parametros.put("estado1", 1);
                parametros.put("estado2", 0);
                if (xvendedor.isSelected()) {
                    parametros.put("parametro", xv);
                } else {
                    parametros.put("parametro", bd.valor("select max(id_vendedor) from vendedor where cia=" + ControlSoftware.cia));
                }
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (opc == 3 && est == 2) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes_porvendedor.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("gira", xv);
                parametros.put("estado1", 0);
                parametros.put("estado2", 0);
                if (xvendedor.isSelected()) {
                    parametros.put("parametro", xv);
                } else {
                    parametros.put("parametro", bd.valor("select max(id_vendedor) from vendedor where cia=" + ControlSoftware.cia));
                }
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (opc == 3 && est == 1) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes_porvendedor.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("gira", xv);
                parametros.put("estado1", 1);
                parametros.put("estado2", 1);
                if (xvendedor.isSelected()) {
                    parametros.put("parametro", xv);
                } else {
                    parametros.put("parametro", bd.valor("select max(id_vendedor) from vendedor where cia=" + ControlSoftware.cia));
                }
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (opc == 4 && est == 3) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes_pordepartamento.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("gira", xd);
                parametros.put("estado1", 1);
                parametros.put("estado2", 0);
                if (xdepartamento.isSelected()) {
                    parametros.put("parametro", xd);
                } else {
                    parametros.put("parametro", bd.valor("select max(id_departamento) from departamento"));
                }
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (opc == 4 && est == 2) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes_pordepartamento.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("gira", xd);
                parametros.put("estado1", 0);
                parametros.put("estado2", 0);
                if (xdepartamento.isSelected()) {
                    parametros.put("parametro", xd);
                } else {
                    parametros.put("parametro", bd.valor("select max(id_departamento) from departamento"));
                }
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (opc == 4 && est == 1) {
            try {
                BaseDeDatos con = new BaseDeDatos();
                Connection conn = con.getConexion();
                // Cargar el reporte desde el archivo .jasper
                String path = "/catalogoclientes_pordepartamento.jasper";
                InputStream inputStream = getClass().getResourceAsStream(path);
                JasperReport jasperReport = (JasperReport) JRLoader.loadObject(inputStream);
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("com", ControlSoftware.cia);
                parametros.put("user", bd.valor("select user from usuario where cod_user=" + ControlSoftware.us));
                parametros.put("gira", xd);
                parametros.put("estado1", 1);
                parametros.put("estado2", 1);
                if (xdepartamento.isSelected()) {
                    parametros.put("parametro", xd);
                } else {
                    parametros.put("parametro", bd.valor("select max(id_departamento) from departamento"));
                }
                parametros.put("img", bd.obtenerImagenDesdeBD(ControlSoftware.cia));
                JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parametros, conn);

                JasperViewer viewer = new JasperViewer(jasperPrint, false);
                viewer.setVisible(true);

            } catch (JRException ex) {
                System.out.println("Error al generar el reporte: " + ex.getMessage());
            } catch (SQLException ex) {
                Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        ReportesClientes l = new ReportesClientes();
        Dimension internalFrameSize = l.getSize();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        l.setLocation((screenSize.width - internalFrameSize.width) / 2,
                (screenSize.height - internalFrameSize.height) / 2);
        DESKSOFTWARE.escritorio.add(l);
        l.show();
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(catalogogeneraldeclientes_opciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new catalogogeneraldeclientes_opciones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> departamento;
    private javax.swing.JComboBox<String> gira;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton pordepartamento;
    private javax.swing.JRadioButton porgira;
    private javax.swing.JRadioButton porvendedor;
    private javax.swing.JRadioButton sf;
    private javax.swing.JRadioButton sinfiltro;
    private javax.swing.JRadioButton soloactivos;
    private javax.swing.JRadioButton soloinactivos;
    private javax.swing.JComboBox<String> vendedor;
    private javax.swing.JCheckBox xdepartamento;
    private javax.swing.JCheckBox xgira;
    private javax.swing.JCheckBox xvendedor;
    // End of variables declaration//GEN-END:variables
}
